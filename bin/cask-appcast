#!/usr/bin/env bash
#
# Get the latest available version from appcast URL.
#
# Version:         0.3.13
# License:         MIT License
# Author:          Victor Popkov <victor@popkov.me>
# Last modified:   01.07.2016

# Getting this script's absoute path even when dealing with multi-level symlinks
SOURCE="${BASH_SOURCE[0]}"
DIR=$(dirname "${SOURCE}")
while [ -h "${SOURCE}" ]; do
  SOURCE=$(readlink "${SOURCE}")
  [[ ${SOURCE} != /* ]] && SOURCE="${DIR}/${SOURCE}"
  DIR="$(cd -P "$(dirname "${SOURCE}")" && pwd)"
done
readonly SOURCE DIR

# Constants and globals
readonly VERSION='0.3.13'
readonly BASE_PATH="$(cd "${DIR}/.." && pwd)"
readonly PROGRAM=$(basename "$0")
declare -a URLS
declare -i OPTIONS_COUNTER=0
BROWSER_HEADERS='User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_9_2) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/33.0.1750.152 Safari/537.36'
GITHUB_USER=$(git config --get github.user)
GITHUB_TOKEN=$(git config --get github.token)
GITHUB_PRERELEASE='false'
MATCHING_TAG=''
DETAILED='true'
CHECKPOINT='false'
PROVIDER='false'
APP_VERSION='false'
DOWNLOADS='false'

# shellcheck source=/dev/null
source "${BASE_PATH}/lib/cask-scripts/general.bash"
# shellcheck source=/dev/null
source "${BASE_PATH}/lib/cask-scripts/appcast.bash"
# shellcheck source=/dev/null
source "${BASE_PATH}/lib/cask-scripts/cask.bash"

# check if 'xmlstarlet' and 'jq' are installed and configured
if [[ ! $(which 'xmlstarlet') ]] || [[ ! $(which 'jq') ]]; then
  case "${OSTYPE}" in
    'darwin'*)
      echo -e "$(tput setaf 1)
        This script requires 'xmlstarlet' and 'jq' to be installed.
        If you have [Homebrew](http://brew.sh/), you can install both with 'brew install xmlstarlet jq'.
      $(tput sgr0)" | sed -E 's/ {8}//' >&2
      ;;
    'linux-gnu')
      echo -e "$(tput setaf 1)
        This script requires 'xmlstarlet' and 'jq' to be installed.
        You can install both with 'apt-get install xmlstarlet jq'.
      $(tput sgr0)" | sed -E 's/ {8}//' >&2
      ;;
    *)
      echo -e "$(tput setaf 1)
        This script requires 'xmlstarlet' and 'jq' to be installed.
      $(tput sgr0)" | sed -E 's/ {8}//' >&2
      ;;
  esac
  exit 1
fi

# Display help.
#
# Globals:
#   PROGRAM
usage() {
  echo "usage: ${PROGRAM} [options] [<appcast_urls>...]

    Get the latest available version, checkpoint and download URL(s) from appcast.

    options:
      -g, --github <user>:<token>   GitHub username and personal token.
      -H, --header <header>         Set browser header.
      -m, --match <tag>             Try to filter using the matching tag.
      -u, --unstable                Try to get unstable releases if possible.
      -c, --checkpoint              Output appcast checkpoint.
      -p, --provider                Output appcast provider.
      -V, --app-version             Output app version and build (if available).
      -d, --downloads               Output download URL(s).
      -v, --version                 Show current script version.
      -h, --help                    Show this help." | sed -E 's/^ {4}//'
}

# exit if no arguments
if [[ "$#" -eq 0 ]]; then
  usage >&2
  exit 1
fi

# available flags
while [[ "$1" ]]; do
  case "$1" in
    -g | --github)
      # shellcheck disable=SC2034
      GITHUB_USER=$(cut -d ':' -f 1 <<< "$2")
      # shellcheck disable=SC2034
      GITHUB_TOKEN=$(cut -d ':' -f 2 <<< "$2")
      readonly GITHUB_USER GITHUB_TOKEN
      shift
      ;;
    -H | --header)
      readonly BROWSER_HEADERS="$2"
      shift
      ;;
    -m | --match)
      readonly MATCHING_TAG="$2"
      shift
      ;;
    -u | --unstable)
      # shellcheck disable=SC2034
      GITHUB_PRERELEASE='true'
      ;;
    -c | --checkpoint)
      ((OPTIONS_COUNTER++))
      CHECKPOINT='true'
      DETAILED='false'
      ;;
    -p | --provider)
      ((OPTIONS_COUNTER++))
      PROVIDER='true'
      DETAILED='false'
      ;;
    -V | --app-version)
      ((OPTIONS_COUNTER++))
      APP_VERSION='true'
      DETAILED='false'
      ;;
    -d | --downloads)
      ((OPTIONS_COUNTER++))
      DOWNLOADS='true'
      DETAILED='false'
      ;;
    -v | --version)
      version
      ;;
    -h | --help)
      usage
      exit 0
      ;;
    -*)
      syntax_error "unrecognized option: $1"
      ;;
    *)
      URLS=("$@")
      for url in "${URLS[@]}"; do
        if [[ ! "${url}" =~ (https?|ftp|file)://[-A-Za-z0-9\+\&@#/%?=~_|!:,.\;]*[-A-Za-z0-9\+\&@#/%=~_|] ]]; then
          if [[ "${#URLS[@]}" -gt 1 ]]; then error 'One of the provided appcast URLs is not valid'
          else error 'The provided appcast URL is not valid'; fi
        fi
      done
      break
      ;;
  esac
  shift
done

# exit if no URL(s) provided
[[ "${#URLS[@]}" -eq 0 ]] && error 'The appcast URL not provided'

# Extract version number from URL or content.
#
# Globals:
#   MATCHING_TAG
#
# Arguments:
#   $1 - URL     (required)
#   $2 - Content (not required)
#
# Returns version and status.
get_appcast_version() {
  local url content out code values version

  readonly url="$1"

  content="$2"
  if [[ -z "$2" ]]; then
    readonly out=$(get_url_content "${url}")
    readonly code=$(echo "${out}" | tail -n1)
    content=$(echo "${out}" | sed \$d)
  fi
  readonly content

  case "$(get_appcast_provider "${content}")" in
    'Sparkle')
      readonly values=($(get_sparkle_latest "${content}" "${MATCHING_TAG}"))
      version="${values[0]}"
      [[ "${#values[@]}" -eq 3 ]] && [[ "${values[0]}" != "${values[1]}" ]] && version="${values[0]},${values[1]}"
      [[ ! -z "${version}" ]] && echo "${version}" && return 0
    ;;
    'GitHub Atom')
      readonly values=($(get_github_atom_latest "${url}" "${MATCHING_TAG}"))
      [[ ! -z "${values[1]}" ]] && echo "${values[1]}" && return 0
    ;;
  esac

  return 1
}

# Extract download URLs from appcast URL or content.
#
# Globals:
#   MATCHING_TAG
#
# Arguments:
#   $1 - URL     (required)
#   $2 - Content (not required)
#
# Returns array of dowload URLs and status.
get_appcast_downloads() {
  local url content out code values download_url
  local -a output

  readonly url="$1"

  content="$2"
  if [[ -z "$2" ]]; then
    readonly out=$(get_url_content "${url}")
    readonly code=$(echo "${out}" | tail -n1)
    content=$(echo "${out}" | sed \$d)
  fi
  readonly content

  case "$(get_appcast_provider "${content}")" in
    'Sparkle')
      readonly values=($(get_sparkle_latest "${content}" "${MATCHING_TAG}"))
      download_url="${values[1]}"
      [[ "${#values[@]}" -eq 3 ]] && download_url="${values[2]}"
      [[ ! -z "${download_url}" ]] && echo "${download_url}" && return 0
    ;;
    'GitHub Atom')
      readonly values=($(get_github_atom_latest "${url}" "${MATCHING_TAG}"))
      if [[ "${#values[@]}" -gt 1 ]]; then
        for ((i = 2; i < ${#values[@]}; i++)); do
          output+=(${values[i]})
        done
        echo "${output[@]}" && return 0
      fi
    ;;
  esac

  return 1
}

# Create review for Sparkle appcast.
#
# Globals:
#   MATCHING_TAG
#
# Arguments:
#   $1 - Content
review_sparkle() {
  local values version build download_url

  add_to_review 'Provider' 'Sparkle'
  readonly values=($(get_sparkle_latest "$1" "${MATCHING_TAG}"))
  if [[ "$?" -gt 0 ]]; then
    add_to_review '' "$(tput setaf 3)no results available$(tput sgr0)"
  else
    version="${values[0]}"
    build="${values[1]}"
    download_url="${values[1]}"
    [[ "${#values[@]}" -eq 3 ]] && download_url="${values[2]}"

    # version
    [[ -z "${version}" ]] && version='-'
    add_to_review 'Latest version' "${version}"

    # build
    [[ "${#values[@]}" -eq 3 ]] && [[ "${version}" != "${build}" ]] && add_to_review 'Latest build' "${build}"

    # download url
    [[ -z "${download_url}" ]] && download_url='-'
    add_to_review 'Latest download URL' "${download_url}"
  fi
}

# Create review for GitHub Atom appcast.
#
# Globals:
#   MATCHING_TAG
#
# Arguments:
#   $1 - URL
review_github() {
  local url stat_name_downloads values version
  local -i status

  add_to_review 'Provider' 'GitHub Atom'

  readonly url="$1"
  readonly values=($(get_github_atom_latest "${url}" "${MATCHING_TAG}"))
  readonly status="$?"

  if [[ "${status}" -gt 0 ]]; then
    case "${status}" in
      2) add_to_review '' "$(tput setaf 1)API rate limit exceeded$(tput sgr0)";;
      *) add_to_review '' "$(tput setaf 3)no results available$(tput sgr0)";;
    esac
  else
    [[ "${values[0]}" == 'true' ]] && label="$(tput setaf 3)Pre-release$(tput sgr0)" || label="$(tput setaf 2)Latest$(tput sgr0)"
    [[ ! -z "${values[1]}" ]] && version="$(printf "%s (%s)" "${values[1]}" "${label}")" || version='-'

    add_to_review 'Latest version' "${version}"

    stat_name_downloads='Latest download URL'
    if [[ "${#values[@]}" -gt 2 ]]; then
      [[ "${#values[@]}" -gt 3 ]] && stat_name_downloads+='s'
      add_to_review "${stat_name_downloads}" "${values[2]}"
      for ((i = 3; i < ${#values[@]}; i++)); do
        add_to_review '' "${values[i]}"
      done
    else
      add_to_review "${stat_name_downloads}" '-'
    fi
  fi
}

# Globals:
#   URLS
#   CHECKPOINT
#   PROVIDER
#   APP_VERSION
#   DOWNLOADS
#   OPTIONS_COUNTER
#   DETAILED
#
# Arguments:
#   $1 - URL
#
# Returns status.
main() {
  local url out content code result status

  readonly url="$1"
  readonly out=$(get_url_content "${url}")
  readonly content=$(echo "${out}" | sed \$d)
  readonly code=$(echo "${out}" | tail -n1)

  if [[ "${CHECKPOINT}" == 'true' ]]; then
    result=$(generate_appcast_checkpoint "${content}")
    [[ "$?" -eq 0 ]] && printf "%s" "${result}" || printf '-'
    [[ "${OPTIONS_COUNTER}" -gt 1 ]] && printf ';'
  fi

  if [[ "${PROVIDER}" == 'true' ]]; then
    result=$(get_appcast_provider "${content}")
    [[ "$?" -eq 0 ]] && printf "%s" "${result}" || printf '-'
    [[ "${OPTIONS_COUNTER}" -gt 1 ]] && printf ';'
  fi

  if [[ "${APP_VERSION}" == 'true' ]]; then
    result=$(get_appcast_version "${url}" "${content}")
    [[ "$?" -eq 0 ]] && printf "%s" "${result}" || printf '-'
    [[ "${OPTIONS_COUNTER}" -gt 1 ]] && printf ';'
  fi

  if [[ "${DOWNLOADS}" == 'true' ]]; then
    result=$(get_appcast_downloads "${url}" "${content}")
    [[ "$?" -eq 0 ]] && printf "%s" "${result}" || printf '-'
    [[ "${OPTIONS_COUNTER}" -gt 1 ]] && printf ';'
  fi

  [[ "${code}" -eq 200 ]] && status="$(tput setaf 2)${code}$(tput sgr0)" || status="$(tput setaf 1)${code}$(tput sgr0)"

  if [[ "${DETAILED}" == 'true' ]]; then
    add_to_review 'Appcast' "$(tput setaf 7)${url}$(tput sgr0) (${status})"

    if [[ "${code}" -ne 200 ]]; then
      add_to_review 'Status' "$(tput setaf 1)HTTP Error ${code}$(tput sgr0)"
    else
      add_to_review 'Checkpoint' "$(generate_appcast_checkpoint "${content}")"

      case "$(get_appcast_provider "${content}")" in
        'Sparkle')     review_sparkle "${content}";;
        'GitHub Atom') review_github "${url}";;
        *) add_to_review 'Provider' "$(tput setaf 3)unknown$(tput sgr0)";;
      esac
    fi

    show_review 24
    [[ "${#URLS[@]}" -gt 1 ]] && [[ "${URLS[${#URLS[@]}-1]}" != "${url}" ]] && divide
  else
    printf "\n"
  fi

  [[ "${code}" -eq 200 ]] && return 0 || return 1
}

# process
[[ "${DETAILED}" == 'true' ]] && [[ "${#URLS[@]}" -gt 1 ]] && printf "Checking %s appcasts...\n" "${#URLS[@]}" && divide
for url in "${URLS[@]}"; do main "${url}"; done

exit 0
