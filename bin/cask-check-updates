#!/usr/bin/env bash
#
# Find outdated casks and their latest versions.
#
# Version:         0.5.2
# License:         MIT License
# Author:          Victor Popkov <victor@popkov.me>
# Last modified:   08.06.2016

# Getting this script's absoute path even when dealing with multi-level symlinks
SOURCE="${BASH_SOURCE[0]}"
DIR=$(dirname "${SOURCE}")
while [ -h "${SOURCE}" ]; do
  SOURCE=$(readlink "${SOURCE}")
  [[ ${SOURCE} != /* ]] && SOURCE="${DIR}/${SOURCE}"
  DIR="$(cd -P "$(dirname "${SOURCE}")" && pwd)"
done
readonly SOURCE DIR

# Constants and globals
readonly VERSION='0.5.2'
readonly BASE_PATH="$(cd "${DIR}/.." && pwd)"
readonly PROGRAM=$(basename "$0")
readonly BROWSER_HEADERS='User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_9_2) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/33.0.1750.152 Safari/537.36'
readonly CONFIG_FILE_XML="${BASE_PATH}/lib/cask-scripts/config/cask-check-updates.xml"
declare -a CASKS
GITHUB_USER=$(git config --get github.user)
GITHUB_TOKEN=$(git config --get github.token)
GITHUB_PRERELEASE='false'
OUTPUT='false'
OUTPUT_PATH=''
SHOW_ALL='false'
SHOW_CHECKPOINTS='false'

# shellcheck source=/dev/null
source "${BASE_PATH}/lib/cask-scripts/general.bash"
# shellcheck source=/dev/null
source "${BASE_PATH}/lib/cask-scripts/appcast.bash"
# shellcheck source=/dev/null
source "${BASE_PATH}/lib/cask-scripts/cask.bash"

# check if 'xmlstarlet' and 'jq' are installed and configured
if [[ ! $(which 'xmlstarlet') ]] || [[ ! $(which 'jq') ]]; then
  case "${OSTYPE}" in
    'darwin'*)
      echo -e "$(tput setaf 1)
        This script requires 'xmlstarlet' and 'jq' to be installed.
        If you have [Homebrew](http://brew.sh/), you can install both with 'brew install xmlstarlet jq'.
      $(tput sgr0)" | sed -E 's/ {8}//' >&2
      ;;
    'linux-gnu')
      echo -e "$(tput setaf 1)
        This script requires 'xmlstarlet' and 'jq' to be installed.
        You can install both with 'apt-get install xmlstarlet jq'.
      $(tput sgr0)" | sed -E 's/ {8}//' >&2
      ;;
    *)
      echo -e "$(tput setaf 1)
        This script requires 'xmlstarlet' and 'jq' to be installed.
      $(tput sgr0)" | sed -E 's/ {8}//' >&2
      ;;
  esac
  exit 1
fi

# Display help.
#
# Globals:
#   PROGRAM
usage() {
  echo "usage: ${PROGRAM} [options]

    Scan casks with appcasts for outdated ones and get the latest available version(s).

    options:
      -g, --github <user>:<token>   GitHub username and personal token.
      -o, --output <filepath>       Output the results in CSV format into file.
      -u, --unstable                Try to get unstable releases if possible.
      -a, --all                     Show and output also all updated casks.
      -c, --checkpoints             Validate checkpoints.
      -v, --version                 Show current script version.
      -h, --help                    Show this help." | sed -E 's/^ {4}//'
}

# available flags
while [[ "$1" ]]; do
  case "$1" in
    -g | --github)
      # shellcheck disable=SC2034
      GITHUB_USER=$(cut -d ':' -f 1 <<< "$2")
      # shellcheck disable=SC2034
      GITHUB_TOKEN=$(cut -d ':' -f 2 <<< "$2")
      readonly GITHUB_USER GITHUB_TOKEN
      shift
      ;;
    -o | --output)
      readonly OUTPUT='true'
      readonly OUTPUT_PATH="$2"
      shift
      ;;
    -u | --unstable)
      # shellcheck disable=SC2034
      GITHUB_PRERELEASE='true'
      ;;
    -a | --all)
      SHOW_ALL='true'
      ;;
    -c | --checkpoints)
      readonly SHOW_CHECKPOINTS='true'
      ;;
    -v | --version)
      version
      ;;
    -h | --help)
      usage
      exit 0
      ;;
    -*)
      syntax_error "unrecognized option: $1"
      ;;
    *)
      for arg in "$@"; do
        cask="${arg/.rb}"
        [[ -f "${cask}.rb" ]] && CASKS+=("${cask}") || printf "Cask '%s' not found\n" "${cask}"
      done
      [[ "$#" != "${#CASKS[@]}" ]] && [[ "${#CASKS[@]}" -eq 0 ]] && exit 1

      readonly SHOW_ALL='true'
      break
      ;;
  esac
  shift
done

# check if in correct directory
if ! pwd | grep -q 'homebrew-.*/Casks'; then
  error "You need to be inside a '/homebrew-*/Casks' directory"
fi

# Extract version number with download URL/URLs from appcast content.
#
# Arguments:
#   $1 - Cask name (required)
#   $2 - URL       (required)
#   $3 - Content   (not required)
#
# Returns version.
get_appcast_version_with_downloads() {
  local cask url content out code values version download_url tag rule
  local -a casks_matching_tag

  readonly cask="$1"
  readonly url="$2"

  content="$3"
  if [[ -z "$3" ]]; then
    readonly out=$(get_url_content "${url}")
    readonly code=$(echo "${out}" | tail -n1)
    content=$(echo "${out}" | sed \$d)
  fi
  readonly content

  case "$(get_appcast_provider "${content}")" in
    'Sparkle')
      tag=''
      readonly casks_matching_tag=($(get_xml_config_values '//matching-tag/cask/@tag' '../.' '.'))
      for i in "${!casks_matching_tag[@]}"; do
        if [[ $((i%2)) -ne 0 ]]; then
          key="${casks_matching_tag[$i-1]}"
          value="${casks_matching_tag[$i]}"
          [[ "${key}" == "${cask}" ]] && tag="${value}"
        fi
      done

      readonly values=($(get_sparkle_latest "${content}" "${tag}"))
      version="${values[0]}"
      if [[ "${#values[@]}" -eq 3 ]]; then
        [[ "${values[0]}" != "${values[1]}" ]] && version="${values[0]},${values[1]}"
        download_url="${values[2]}"
      else
        download_url="${values[1]}"
      fi
      echo "${version} ${download_url}" && return 0
    ;;
    'GitHub Atom')
      tag=''
      readonly casks_matching_tag=($(get_xml_config_values '//matching-tag/cask/@tag' '../.' '.'))
      for i in "${!casks_matching_tag[@]}"; do
        if [[ $((i%2)) -ne 0 ]]; then
          key="${casks_matching_tag[$i-1]}"
          value="${casks_matching_tag[$i]}"
          [[ "${key}" == "${cask}" ]] && tag="${value}"
        fi
      done

      readonly values=($(get_github_atom_latest "${url}" "${tag}"))
      [[ ! -z "${values[1]}" ]] && echo "${values[1]}" && return 0
    ;;
  esac

  return 1
}

# Suggest version to use in casks download URL.
#
# Arguments:
#   $1 - Cask name
#   $2 - Current version
#   $3 - Latest version
#   $4 - Latest download URL
#
# Returns suggested version.
suggest_cask_version() {
  local cask version latest_version latest_build latest_download_url
  local delimiter result devmate_version rule
  local devmate_part amazonaws_part hackplan_part hockeyapp_part
  local -a cask_rules

  cask="$1"
  version="$2"
  latest_version="$(cut -d ',' -f 1 <<< "$3")"
  latest_build="$(cut -d ',' -f 2 <<< "$3")"
  latest_download_url=$(interpolate_version "$4" "$3")

  [[ "${latest_version}" == "${latest_build}" ]] && latest_build=''

  delimiter=$(sed -e 's/[A-Za-z0-9.]//g' <<< "${version}") # try guessing the delimiter from old version
  [[ -z "${delimiter}" ]] && delimiter='.'
  [[ "${#delimiter}" -ne 1 ]] && delimiter=','

  result="${latest_version}"
  # [[ ! -z "${latest_build}" ]] && result="${latest_version}${delimiter}${latest_build}" || result="${latest_version}"

  # dl.devmate.com
  if [[ "${latest_download_url}" =~ dl.devmate.com ]] || [[ "${latest_download_url}" =~ dl.smilesoftware.com ]]; then
    devmate_version="$(cut -d '/' -f 5 <<< "${latest_download_url}")"
    devmate_part="$(cut -d '/' -f 6 <<< "${latest_download_url}")"

    if [[ "${#devmate_part}" -eq 10 ]]; then
      if [[ ! -z "${latest_build}" ]] && [[ "${devmate_version}" == "${latest_build}" ]]; then
        result="${latest_version},${latest_build}:${devmate_part}"
      else
        result="${latest_version}${delimiter}${devmate_part}"
      fi
    fi
  fi

  # hockeyapp.net
  if [[ "${latest_download_url}" =~ hockeyapp.net ]]; then
    hockeyapp_part="$(cut -d '/' -f 9 <<< "${latest_download_url}" | cut -d '?' -f 1)"

    if [[ "${#hockeyapp_part}" -eq 3 ]]; then
      result="${latest_version},${latest_build}:${hockeyapp_part}"
    fi
  fi

  # amazonaws.com
  if [[ "${latest_download_url}" =~ amazonaws.com ]]; then
    amazonaws_part="$(cut -d '/' -f 6 <<< "${latest_download_url}")"
  fi

  # cdn.hackplan.com
  if [[ "${latest_download_url}" =~ cdn.hackplan.com ]]; then
    hackplan_part="$(cut -d '/' -f 5 <<< "${latest_download_url}")"
  fi

  # "<version><delimiter><build>"
  cask_rules=($(get_xml_config_values '//version-delimiter-build' 'cask'))
  for rule in "${cask_rules[@]}"; do
    [[ "${cask}" == "${rule}" ]] && result="${latest_version}${delimiter}${latest_build}"
  done

  # "<version>"
  cask_rules=($(get_xml_config_values '//version-only' 'cask'))
  for rule in "${cask_rules[@]}"; do
    [[ "${cask}" == "${rule}" ]] && result="${latest_version}"
  done

  # "<build>"
  cask_rules=($(get_xml_config_values '//build-only' 'cask'))
  for rule in "${cask_rules[@]}"; do
    [[ "${cask}" == "${rule}" ]] && result="${latest_build}"
  done

  # custom rules
  rule=$(get_xml_config_custom_rule "${cask}")
  if [[ ! -z "${rule}" ]]; then
    result=$(interpolate_version "${rule}" "${latest_version}" 'version')
    result=$(interpolate_version "${result}" "${latest_build}" 'build')
    result=$(interpolate_version "${result}" "${delimiter}" 'delimiter')
    result=$(interpolate_version "${result}" "${devmate_part}" 'devmate-part')
    result=$(interpolate_version "${result}" "${hockeyapp_part}" 'hockeyapp-part')
    result=$(interpolate_version "${result}" "${amazonaws_part}" 'amazonaws-part')
    result=$(interpolate_version "${result}" "${hackplan_part}" 'hackplan-part')
  fi

  echo "${result}"
}

# Review cask versions.
#
# Globals:
#   SHOW_ALL
#
# Arguments:
#   $1 - Cask name
review_cask_versions() {
  local -a versions appcasts checkpoints urls latest
  local -i versions_max_length appcasts_counter i status
  local cask values line version appcast checkpoint url out code content latest_checkpoint latest_version suggested_version suggested_latest_version latest_url review_name review_value

  readonly cask="$1"
  readonly values=$(get_cask_version_appcast_checkpoint_url "${cask}")

  IFS=$'\n' read -rd '' -a lines <<< "${values}"

  for line in "${lines[@]}"; do
    line=($(echo "${line}" | xargs))
    version="${line[0]}"
    appcast=$(interpolate_version "${line[1]}" "${version}")
    checkpoint="${line[2]}"
    url="${line[3]}"

    [[ -z "${version}" ]] && continue

    [[ "${versions_max_length}" -lt "${#version}" ]] && versions_max_length="${#version}"
    versions+=("${version}")
    appcasts+=("${appcast}")
    checkpoints+=("${checkpoint}")
    urls+=("${url}")

    [[ "${#line[@]}" -lt 3 ]] && continue
    [[ -z "${appcast}" ]] && continue
    ((appcasts_counter++))
  done

  for ((i = 0; i < ${#versions[@]}; i++)); do
    version="${versions[i]}"
    appcast="${appcasts[i]}"
    checkpoint="${checkpoints[i]}"
    url="${urls[i]}"

    if [[ "${i}" -eq 0 ]]; then
      review_name='Cask version'
      [[ "${appcasts_counter}" -gt 1 ]] && review_name+='s'
    else
      review_name=''
    fi

    review_value=$(printf "%-${versions_max_length}s" "${version}")

    if [[ ! -z "${appcast}" ]] && [[ ! -z "${checkpoint}" ]]; then
      out=$(get_url_content "${appcast}")
      code=$(echo "${out}" | tail -n1)
      content=$(echo "${out}" | sed \$d)

      latest=($(get_appcast_version_with_downloads "${cask}" "${appcast}"))
      status="$?"
      latest_checkpoint="$(generate_appcast_checkpoint "${content}")"
      latest_version="${latest[0]}"
      latest_url="${latest[1]}"

      suggested_version=$(suggest_cask_version "${cask}" "${version}" "${version}" "${url}")
      suggested_latest_version=$(suggest_cask_version "${cask}" "${version}" "${latest_version}" "${latest_url}")

      if [[ "${latest_checkpoint}" == "${checkpoint}" ]] && [[ "${status}" -eq 0 ]]; then
        review_value+=" | ${latest_version}"
        if [[ "${latest_version}" != "${suggested_latest_version}" ]]; then
          review_value+=" → $(tput setaf 7)${suggested_latest_version}$(tput sgr0)"
        fi
        [[ "${SHOW_ALL}" == 'true' ]] && output_csv "${cask}" "${appcast}" "${version}" "${latest_version}" "${suggested_latest_version}"
      elif [[ "${status}" -eq 0 ]]; then
        if [[ "${latest_version}" =~ ${version} ]] || [[ "${version}" =~ ${latest_version} ]]; then
          review_value+=" | ${latest_version}"
          if [[ "${latest_version}" != "${suggested_version}" ]]; then
            review_value+=" → $(tput setaf 7)${suggested_version}$(tput sgr0)"
          fi
          [[ "${SHOW_ALL}" == 'true' ]] && output_csv "${cask}" "${appcast}" "${version}" "${latest_version}" "${suggested_version}"
        else
          show='true'
          review_value+=" | $(tput setaf 2)${latest_version}$(tput sgr0)"
          if [[ "${latest_version}" != "${suggested_latest_version}" ]]; then
            review_value+=" → $(tput setaf 2)${suggested_latest_version}$(tput sgr0)"
          fi
          review_value+=" (latest)"
          output_csv "${cask}" "${appcast}" "${version}" "${latest_version}" "${suggested_latest_version}"
        fi
      else
        review_value+=" | -"
      fi
    else
      review_value+=" | -"
    fi

    add_to_review "${review_name}" "${review_value}"
  done
}

# Review cask appcasts.
#
# Arguments:
#   $1 - Cask name
#   $2 - Appcast
#   $3 - Current version
#   $4 - Latest version
review_cask_appcasts() {
  local -a appcasts checkpoints
  local -i appcasts_max_length i
  local cask values version appcast checkpoint out code content latest_checkpoint latest_version review_name review_value status

  readonly cask="$1"
  readonly values=$(get_cask_version_appcast_checkpoint_url "${cask}")

  IFS=$'\n' read -rd '' -a lines <<< "${values}"

  for line in "${lines[@]}"; do
    line=($(echo "${line}" | xargs))
    version="${line[0]}"
    appcast=$(interpolate_version "${line[1]}" "${version}")
    checkpoint="${line[2]}"

    [[ "${#line[@]}" -lt 3 ]] && continue
    [[ -z "${appcast}" ]] && continue

    [[ "${appcasts_max_length}" -lt "${#appcast}" ]] && appcasts_max_length="${#appcast}"
    appcasts+=("${appcast}")
    checkpoints+=("${checkpoint}")
  done

  for ((i = 0; i < ${#appcasts[@]}; i++)); do
    appcast="${appcasts[i]}"
    checkpoint="${checkpoints[i]}"

    out=$(get_url_content "${appcast}")
    code=$(echo "${out}" | tail -n1)
    content=$(echo "${out}" | sed \$d)

    if [[ "${code}" -eq 000 ]] && [[ "${appcast}" =~ 'https' ]]; then
      appcast="${appcast/https/http}"

      out=$(get_url_content "${appcast}")
      code=$(echo "${out}" | tail -n1)
      content=$(echo "${out}" | sed \$d)

      [[ "${appcasts_max_length}" -eq "$((${#appcast}+1))" ]] && ((appcasts_max_length--))
    fi

    latest_checkpoint="$(generate_appcast_checkpoint "${content}")"

    [[ "${i}" -eq 0 ]] && review_name='Cask appcast' || review_name=''
    [[ "${i}" -eq 0 ]] && [[ "${#appcasts[@]}" -gt 1 ]] && review_name+='s'

    review_value=$(printf "%-$((appcasts_max_length+6))s" "${appcast} (${code})")

    if [[ "${code}" -eq 200 ]]; then
      if [[ "${latest_checkpoint}" == "${checkpoint}" ]]; then
        status="$(tput setaf 2)valid$(tput sgr0) (${checkpoint:0:6}...)"
        review_value+=$(printf " %s" "| ${status}")
      else
        status="$(tput setaf 3)outdated checkpoint$(tput sgr0) (${checkpoint:0:6}... => $(tput setaf 7)${latest_checkpoint:0:6}$(tput sgr0)...)"
        review_value+=$(printf " %s" "| ${status}")
      fi
    else
      status="$(tput setaf 1)error ${code}$(tput sgr0)"
      review_value+=$(printf " %s" "| ${status}")
    fi

    add_to_review "${review_name}" "${review_value}"
  done
}

# Append new line to CSV file.
#
# Globals:
#   OUTPUT
#   OUTPUT_PATH
#
# Arguments:
#   $1 - Cask name
#   $2 - Appcast
#   $3 - Current version
#   $4 - Latest version
#   $5 - Suggested latest version
output_csv() {
  [[ "${OUTPUT}" == 'true' ]] && printf "\"%s\";\"%s\";\"%s\";\"%s\";\"%s\"\n" "$1" "$2" "$3" "$4" "$5" >> "${OUTPUT_PATH}"
}

# Globals:
#   SHOW_CHECKPOINTS
#
# Arguments:
#   $1 - Cask
main() {
  local cask show

  readonly cask="$1"
  show='false'

  add_to_review 'Cask name' "$(tput setaf 7)${cask}$(tput sgr0)"

  review_cask_versions "${cask}"
  [[ "${SHOW_CHECKPOINTS}" == 'true' ]] && review_cask_appcasts "${cask}"

  [[ "${SHOW_ALL}" == 'true' ]] && show='true'
  [[ "${show}" == 'true' ]] && show_review 17

  # shellcheck disable=SC2034
  REVIEW_NAMES=()
  # shellcheck disable=SC2034
  REVIEW_VALUES=()

  [[ "${show}" == 'true' ]] && [[ "${#CASKS[@]}" -gt 1 ]] && divide
}

# process
[[ "${#CASKS[@]}" -eq 0 ]] && CASKS=($(egrep -lir --include '*.rb' "(appcast ')" . | xargs -n1 basename | sed 's|\.rb$||' | sort))
[[ "${#CASKS[@]}" -gt 1 ]] && printf "Checking updates for %s casks...\n" "${#CASKS[@]}" && divide
[[ "${OUTPUT}" == 'true' ]] && printf "\"%s\";\"%s\";\"%s\";\"%s\";\"%s\"\n" 'Name' 'Appcast' 'Current version' 'Latest version' 'Suggested latest version' > "${OUTPUT_PATH}"
for cask in "${CASKS[@]}"; do main "${cask}"; done

exit 0
