#!/usr/bin/env bash

# Constants and globals
readonly PROGRAM="$(basename "$0")"
readonly BROWSER_HEADERS='User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_9_2) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/33.0.1750.152 Safari/537.36'
declare -a CASKS
declare -a REVIEW
GITHUB_USER=$(git config --get github.user)
GITHUB_TOKEN=$(git config --get github.token)
GITHUB_PRERELEASE='false'
OUTPUT='false'
OUTPUT_PATH=''
SHOW_ALL='false'
SHOW_CHECKPOINTS='false'

syntax_error() {
  echo "${PROGRAM}: $1" >&2
  echo "Try \`${PROGRAM} --help\` for more information." >&2
  exit 1
}

error() {
  echo "$(tput setaf 1)$1$(tput sgr0)" >&2
  exit 1
}

usage() {
  echo "usage: ${PROGRAM} [options]

    Find outdated casks and their latest versions.

    options:
      -u <user>, --github-user <user>      GitHub username (default: 'git config --get github.user').
      -t <token>, --github-token <token>   GitHub personal token (default: 'git config --get github.token').
      -o <filepath>, --output <filepath>   Output the results into file using CSV format.
      -s <mode>, --stability <mode>        Try to get 'stable' or 'unstable' latest version if possible (default: 'stable').
      -a, --all                            Show and output also all updated casks.
      -c, --checkpoints                    Include checkpoints validations.
      -h, --help                           Show this help." | sed -E 's/^ {4}//'
}

# check if 'xmlstarlet' and 'jq' are installed and configured
if [[ ! $(which 'xmlstarlet') ]] || [[ ! $(which 'jq') ]]; then
  case "${OSTYPE}" in
    'darwin'*)
      echo -e "$(tput setaf 1)
        This script requires 'xmlstarlet' and 'jq' to be installed.
        If you have [Homebrew](http://brew.sh/), you can install both with 'brew install xmlstarlet jq'.
      $(tput sgr0)" | sed -E 's/ {8}//' >&2
      ;;
    'linux-gnu')
      echo -e "$(tput setaf 1)
        This script requires 'xmlstarlet' and 'jq' to be installed.
        You can install both with 'apt-get install xmlstarlet jq'.
      $(tput sgr0)" | sed -E 's/ {8}//' >&2
      ;;
    *)
      echo -e "$(tput setaf 1)
        This script requires 'xmlstarlet' and 'jq' to be installed.
      $(tput sgr0)" | sed -E 's/ {8}//' >&2
      ;;
  esac
  exit 1
fi

# check if in correct directory
if ! pwd | grep -q 'homebrew-.*/Casks'; then
  error "You need to be inside a '/homebrew-*/Casks' directory"
fi

# available flags
while [[ "$1" ]]; do
  case "$1" in
    -a | --all)
      SHOW_ALL='true'
      ;;
    -c | --checkpoints)
      SHOW_CHECKPOINTS='true'
      readonly SHOW_CHECKPOINTS
      ;;
    -u | --github-user)
      GITHUB_USER="$2"
      readonly GITHUB_USER
      shift
      ;;
    -t | --github-token)
      GITHUB_TOKEN="$2"
      readonly GITHUB_TOKEN
      shift
      ;;
    -o | --output)
      OUTPUT='true'
      OUTPUT_PATH="$2"
      readonly OUTPUT OUTPUT_PATH
      shift
      ;;
    -s | --stability)
      case "$2" in
        stable)
          GITHUB_PRERELEASE='false'
          ;;
        unstable)
          GITHUB_PRERELEASE='true'
          ;;
        *)
          error "The stability should have one of the values: 'stable' or 'unstable'"
          ;;
      esac
      shift
      ;;
    -h | --help)
      usage
      exit 0
      ;;
    -*)
      syntax_error "unrecognized option: $1"
      ;;
    *)
      CASKS=("${@/.rb/}")
      readonly CASKS
      [[ "${#CASKS[@]}" -eq 1 ]] && SHOW_ALL='true'
      readonly SHOW_ALL
      break
      ;;
  esac
  shift
done

# Divider to separate output in terminal.
#
# Globals:
#   COLUMNS
#
# Returns the full-width terminal divider.
divide() {
  if [[ $(which hr) ]]; then hr '-'
  else printf '%*s\n' "${COLUMNS:-$(tput cols)}" '' | tr ' ' -; fi
}

# Get value/values of a cask stanza.
#
# Arguments:
#   $1 - Cask name
#   $2 - Stanza name
#
# Returns the stanza value.
get_cask_stanza_value() {
  grep "^\s*.$2" < "$1.rb" | awk '{ print $2 }' | sed -E 's/,$//' | xargs
}

# Get version, appcast and checkpoint for specific cask.
#
# Arguments:
#   $1 - Cask name
#
# Returns values for each version as new line in format:
#   <version> <appcast> <checkpoint>
get_cask_version_appcast_checkpoint() {
  local -a versions
  local cask next content appcast checkpoint

  cask="$1.rb"
  versions=($(grep "^\s*.version" < "${cask}" | awk '{ print $2 }' | sed -E 's/,$//' | xargs))

  for ((i = 0; i < ${#versions[@]}; i++)); do
    [[ "$((i+1))" -lt "${#versions[@]}" ]] && next="/version '${versions[$i+1]}'/" || next='0'
    content=$(awk "/version '${versions[i]}'/,${next}" < "${cask}")
    appcast=$(echo "${content}" | grep 'appcast ' | awk '{ print $2 }' | sed -E 's/,$//' | xargs)
    checkpoint=$(echo "${content}" | grep 'checkpoint: ' | awk '{ print $2 }' | sed -E 's/,$//' | xargs)
    printf "%s %s %s\n" "${versions[i]}" "${appcast}" "${checkpoint}"
  done
}

# Version comparison.
#
# Use 'sort -V' if available, otherwise use custom solution.
#
# Arguments:
#   $1 - First version
#   $2 - Second version
#
# Returns:
#   0 - First = second
#   1 - First > second
#   2 - First < second
compare_versions() {
  local first second

  first=$(normalize_version_hard "$1")
  second=$(normalize_version_hard "$2")

  [[ "${first}" == "${second}" ]] && return 0

  if echo | sort -Vr > /dev/null 2>&1; then
    local versions
    readonly versions=($(printf '%s\n%s\n' "${first}}" "${second}" | sort -Vr))
    [[ "${first}" == "${versions[0]}" ]] && return 1
    [[ "${second}" == "${versions[0]}" ]] && return 2
  else
    # inspired by: http://stackoverflow.com/a/4025065
    local IFS='.'
    local i
    first=(${first})
    second=(${second})
    for ((i = ${#first[@]}; i < ${#second[@]}; i++)); do first[i]=0; done
    for ((i = 0; i < ${#first[@]}; i++)); do
      [[ -z "${second[i]}" ]] && second[i]=0
      ((10#${first[i]} > 10#${second[i]})) && return 1
      ((10#${first[i]} < 10#${second[i]})) && return 2
    done
  fi

  return 0
}

# Create sha256 checksum from content that represents appcast checkpoint.
#
# Arguments:
#   $1 - Content to generate checkpoint from
#
# Returns checkpoint.
generate_appcast_checkpoint() {
  echo "$1" | sed 's|<pubDate>[^<]*</pubDate>||g' | shasum --algorithm 256 | awk '{ print $1 }' && return 0 || return 1
}

# Get content from URL.
#
# Globals:
#   BROWSER_HEADERS
#
# Arguments:
#   $1 - URL
#
# Returns content and status code (last line).
get_url_content() {
  curl --silent --compressed --location "$1" --header "${BROWSER_HEADERS}" --max-time 10 --write-out '\n%{http_code}' 2>/dev/null
}

# Normalize version for some edge cases (safe to use).
#
# Arguments:
#   $1 - Cask name
#   $2 - Version
#   $3 - Build
#
# Returns normalized version.
normalize_version_safe() {
  local cask version build

  readonly cask="$1"
  version="$2"
  readonly build="$3"

  version="${version#[Vv][Ee][Rr][Ss][Ii][Oo][Nn]}"                            # Version3.0 => 3.0
  version=$(tr '[:upper:]' '[:lower:]' <<< "${version}" | sed "s/^${cask}-//") # <caskname>-3.0 => 3.0
  version="${version/=./0.}"                                                   # =.9   => 0.9
  version="${version#[Vv]}"                                                    # v3.0  => 3.0
  version="${version/β/b}"                                                     # 3.0β5 => 3.0b5

  if [[ ! -z "${build}" ]]; then
    version="${version/\(${build}\)}"                     # 3.0(1995)      => 3.0
    version="${version/\([Bb][Uu][Ii][Ll][Dd]${build}\)}" # 3.0(Build1995) => 3.0
    version="${version/[Bb][Uu][Ii][Ll][Dd]${build}}"     # 3.0Build1995   => 3.0
  fi

  echo "${version}"
}

# Normalize version to most common form (unsafe to use).
#
# Arguments:
#   $1 - Version
#
# Returns normalized version.
normalize_version_hard() {
  echo "$1" | sed 's/[^0-9.]*\([0-9A-Za-z.]*\).*/\1/' | xargs
}

# Process parsed Sparkle line to get variables.
#
# Arguments:
#   $1 - Cask name
#   $2 - Line in format: "<version>";"<build>";"<url>";"<title>"
#
# Returns array of variables.
process_appcast_sparkle_line() {
  local cask version version_before build url title
  local -a vars

  readonly cask="$1"
  IFS=';' read -ra vars <<< "$2"

  version="${vars[0]//[\"[:space:]]}"
  readonly version_before="${version}"
  readonly build="${vars[1]//[\"[:space:]]}"
  readonly url=$(echo "${vars[2]}" | sed -e 's/"//g' | sed -e 's/["[:space:]]/%20/g')
  readonly title="${vars[3]//[\"]}"

  [[ "$(normalize_version_hard "${title}")" != "${title}" ]] && [[ "${title//[\"[:space:]]}" == "${version}" ]] && version=''

  [[ -z "${version}" ]] && [[ ! -z "${build}" ]] && version="${build}"

  if [[ -z "${version}" ]] && [[ -z "${build}" ]]; then
    version=$(normalize_version_hard "${title}")
  else
    version=$(normalize_version_safe "${cask}" "${version}" "${build}")
  fi
  readonly version

  result=("${version}" "${build}" "${url}")
  if [[ "${version}" == "${build}" ]] || [[ -z "${version_before}" ]]; then result=("${version}" "${url}"); fi

  echo "${result[@]}" && return 0
}

# Parse content of Sparkle appcast to extract all values.
#
# Globals:
#   PROGRAM
#
# Arguments:
#   $1 - Cask name
#   $2 - Content to parse
#
# Returns array of values.
parse_appcast_sparkle_latest() {
  local cask content xls transform
  local -a lines first last values result

  readonly cask="$1"
  content=$(echo -e "$2" | sed -e $'s/></>\\\n</g') # convert single line XML to multiline
  content=$(echo -e "${content}" | sed -e 's/ xmlns:sparkle=".*"/ xmlns:sparkle="http:\/\/www.andymatuschak.org\/xml-namespaces\/sparkle"/g') # make sparkle namespace more consistent and ignore others
  content=$(echo -e "${content}" | sed -e 's/<!--</</g' | sed -e 's/\/>-->/\/>/g') # uncomment tags
  readonly content

  xls=$(cat <<EOF
<?xml version="1.0"?>
<xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xmlns:sparkle="http://www.andymatuschak.org/xml-namespaces/sparkle">
    <xsl:output method="text" omit-xml-declaration="yes" indent="no" />
    <xsl:strip-space elements="*" />
    <xsl:template match="//channel">
        <xsl:for-each select="item">
            <xsl:choose>
                <xsl:when test="enclosure/@sparkle:shortVersionString or sparkle:shortVersionString">
                    <xsl:choose>
                        <xsl:when test="enclosure/@sparkle:shortVersionString">
                            <xsl:text>"</xsl:text>
                            <xsl:value-of select="enclosure/@sparkle:shortVersionString" />
                            <xsl:text>";</xsl:text>
                        </xsl:when>
                        <xsl:when test="sparkle:shortVersionString">
                            <xsl:text>"</xsl:text>
                            <xsl:value-of select="sparkle:shortVersionString" />
                            <xsl:text>";</xsl:text>
                        </xsl:when>
                    </xsl:choose>
                </xsl:when>
                <xsl:otherwise>
                    <xsl:text>"";</xsl:text>
                </xsl:otherwise>
            </xsl:choose>
            <xsl:choose>
                <xsl:when test="enclosure/@sparkle:version or sparkle:version">
                    <xsl:choose>
                        <xsl:when test="enclosure/@sparkle:version">
                            <xsl:text>"</xsl:text>
                            <xsl:value-of select="enclosure/@sparkle:version" />
                            <xsl:text>";</xsl:text>
                        </xsl:when>
                        <xsl:when test="sparkle:version">
                            <xsl:text>"</xsl:text>
                            <xsl:value-of select="sparkle:version" />
                            <xsl:text>";</xsl:text>
                        </xsl:when>
                    </xsl:choose>
                </xsl:when>
                <xsl:otherwise>
                    <xsl:text>"";</xsl:text>
                </xsl:otherwise>
            </xsl:choose>
            <xsl:choose>
                <xsl:when test="enclosure/@url or link">
                    <xsl:choose>
                        <xsl:when test="enclosure/@url">
                            <xsl:text>"</xsl:text>
                            <xsl:value-of select="enclosure/@url" />
                            <xsl:text>";</xsl:text>
                        </xsl:when>
                        <xsl:when test="link">
                            <xsl:text>"</xsl:text>
                            <xsl:value-of select="link" />
                            <xsl:text>";</xsl:text>
                        </xsl:when>
                    </xsl:choose>
                </xsl:when>
                <xsl:otherwise>
                    <xsl:text>"";</xsl:text>
                </xsl:otherwise>
            </xsl:choose>
            <xsl:choose>
                <xsl:when test="title">
                    <xsl:text>"</xsl:text>
                    <xsl:value-of select="title" />
                    <xsl:text>";</xsl:text>
                </xsl:when>
                <xsl:otherwise>
                    <xsl:text>""</xsl:text>
                </xsl:otherwise>
            </xsl:choose>
            <xsl:text>&#xa;</xsl:text>
        </xsl:for-each>
    </xsl:template>
</xsl:stylesheet>
EOF
)

  echo "${xls}" > "/tmp/${PROGRAM}_sparkle.xsl"

  transform=$(xmlstarlet tr "/tmp/${PROGRAM}_sparkle.xsl" <<< "${content}" 2> /dev/null)
  transform=$(echo "${transform}" | sed -e 's/^[^"]*//g' | sed -e 's/[^;]*$//g')

  IFS=$'\n' read -rd '' -a lines <<< "${transform}"
  if [[ "${#lines[@]}" -gt 0 ]]; then
    readonly first=($(process_appcast_sparkle_line "${cask}" "${lines[0]}"))

    if [[ "${#lines[@]}" -gt 1 ]]; then
      readonly last=($(process_appcast_sparkle_line "${cask}" "${lines[${#lines[@]}-1]}"))

      compare_versions "${first[0]}" "${last[0]}"
      case $? in
        0) values=("${first[@]}") ;; # =
        1) values=("${first[@]}") ;; # >
        2) values=("${last[@]}" );;  # <
      esac
    else
      values=("${first[@]}")
    fi
    readonly values

    echo "${values[@]}" && return 0
  else
    return 1
  fi
}

# Parse content of GitHub Atom appcast to extract all values.
#
# Globals:
#   GITHUB_USER
#   GITHUB_TOKEN
#   GITHUB_PRERELEASE
#
# Arguments:
#   $1 - Cask name
#   $2 - Content to parse
#
# Returns array of values.
parse_appcast_github_latest() {
  local cask user repo auth url out code content latest_tag download_urls code
  local -a result

  [[ ! -z "${GITHUB_USER}" ]] && [[ ! -z "${GITHUB_TOKEN}" ]] && auth=(--user "${GITHUB_USER}:${GITHUB_TOKEN}")

  readonly cask="${1}"
  IFS='/' read -ra parts <<< "$2"
  readonly parts
  readonly user="${parts[3]}"
  readonly repo="${parts[4]}"

  readonly url="https://api.github.com/repos/${user}/${repo}/releases"
  readonly out=$(curl --silent --compressed --location "${url}" "${auth[@]}" --header "${BROWSER_HEADERS}" --max-time 10 --write-out '\n%{http_code}' 2>/dev/null)
  readonly code=$(echo "${out}" | tail -n1)
  readonly content=$(echo "${out}" | sed \$d)

  latest_tag=$(echo "${content}" | jq ".|=sort_by(.created_at) | reverse | .[] | select(.prerelease == ${GITHUB_PRERELEASE}) | .tag_name" 2> /dev/null | head -1 | xargs)
  if [[ -z "${latest_tag}" ]]; then
    [[ "${GITHUB_PRERELEASE}" == 'true' ]] && GITHUB_PRERELEASE='false' || GITHUB_PRERELEASE='true'
    latest_tag=$(echo "${content}" | jq ".|=sort_by(.created_at) | reverse | .[] | select(.prerelease == ${GITHUB_PRERELEASE}) | .tag_name" 2> /dev/null | head -1 | xargs)
    [[ -z "${latest_tag}" ]] && [[ "${code}" -eq 403 ]] && return 2
    [[ -z "${latest_tag}" ]] && return 1
  fi

  readonly download_urls=($(echo "${content}" | jq ".[] | select(.tag_name == \"${latest_tag}\") | .assets" | jq '.[] | .browser_download_url' 2> /dev/null | xargs))
  latest_tag=$(grep -q 'v[0-9]' <<< "${latest_tag}" && echo "${latest_tag/v}" || echo "${latest_tag}") # v3.0 => 3.0
  grep -iq "${cask}" <<< "${latest_tag}" && latest_tag=$(tr '[:upper:]' '[:lower:]' <<< "${latest_tag}" | sed "s/^${cask}-//") # <caskname>-3.0 => 3.0
  result+="${latest_tag}"
  result+=("${download_urls[@]}")

  echo "${result[@]}"
}

# Guess the appcast provider from the content.
#
# Arguments:
#   $1 - Content
#
# Returns provider.
get_appcast_provider() {
  [[ "$1" =~ '<rss'.*'xmlns:sparkle' ]] && echo 'Sparkle' && return 0
  [[ "$1" =~ '<feed'.*'<id>tag:github.com' ]] && echo 'GitHub Atom' && return 0
  return 1
}

# Extract version number from URL or content.
#
# Arguments:
#   $1 - Cask name (required)
#   $2 - URL       (required)
#   $3 - Content   (not required)
#
# Returns version.
get_appcast_version() {
  local cask url content out code values version

  readonly cask="$1"
  readonly url="$2"

  content="$3"
  if [[ -z "$3" ]]; then
    readonly out=$(get_url_content "${url}")
    readonly code=$(echo "${out}" | tail -n1)
    content=$(echo "${out}" | sed \$d)
  fi
  readonly content

  case "$(get_appcast_provider "${content}")" in
    'Sparkle')
      readonly values=($(parse_appcast_sparkle_latest "${cask}" "${content}"))
      version="${values[0]}"
      [[ "${#values[@]}" -eq 3 ]] && [[ "${values[0]}" != "${values[1]}" ]] && version="${values[0]},${values[1]}"
      [[ ! -z "${version}" ]] && echo "${version}" && return 0
    ;;
    'GitHub Atom')
      readonly values=($(parse_appcast_github_latest "${cask}" "${url}"))
      [[ ! -z "${values[0]}" ]] && echo "${values[0]}" && return 0
    ;;
  esac

  return 1
}

# Replace version in url (string interpolation).
#
# Arguments:
#   $1 - URL
#   $2 - Version
#
# Returns URL with version.
replace_version_in_url() {
  local -a parts
  local version major minor patch url part

  url="$1"
  readonly version=$(sed 's/[^0-9.]*\([0-9.]*\).*/\1/' <<< "$2" | xargs)
  readonly parts=($(grep -o "#{version.[^}]*}" <<< "${url}" | xargs))
  readonly major=$(cut -d '.' -f 1 <<< "${version}")
  readonly minor=$(cut -d '.' -f 2 <<< "${version}")
  readonly patch=$(cut -d '.' -f 3 <<< "${version}")

  for part in "${parts[@]}"; do
    case "${part}" in
      '#{version}')                   url="${url//${part}/${version}}" ;;
      '#{version.major}')             url="${url//${part}/${major}}" ;;
      '#{version.minor}')             url="${url//${part}/${minor}}" ;;
      '#{version.patch}')             url="${url//${part}/${patch}}" ;;
      '#{version.major_minor}')       url="${url//${part}/${major}.${minor}}" ;;
      '#{version.major_minor_patch}') url="${url//${part}/${major}.${minor}.${patch}}" ;;
      '#{version.before_comma}')      url="${url//${part}/$(cut -d ',' -f 1 <<< "${2}")}" ;;
      '#{version.after_comma}')       url="${url//${part}/$(cut -d ',' -f 2 <<< "${2}")}" ;;
      '#{version.before_colon}')      url="${url//${part}/$(cut -d ':' -f 1 <<< "${2}")}" ;;
      '#{version.after_colon}')       url="${url//${part}/$(cut -d ':' -f 2 <<< "${2}")}" ;;
      *) return 1;;
    esac
  done

  echo "${url}" && return 0
}

# Add info to review.
#
# Globals:
#   REVIEW
#
# Arguments:
#   $1 - Name
#   $2 - Value
add_to_review() {
  local name
  [[ ! -z "$1" ]] && name="$1:" || name="$1"
  REVIEW+=("$(printf "%-17s %s" "${name}" "$2")")
}

# Show review.
#
# Globals:
#   REVIEW
#
# Returns review.
show_review() {
  [[ "${#REVIEW[@]}" -gt 0 ]] && printf '%s\n' "${REVIEW[@]}"
}

# Review cask versions.
# 
# Globals:
#   SHOW_ALL
#
# Arguments:
#   $1 - Cask name
review_cask_versions() {
  local -a versions appcasts checkpoints
  local -i versions_max_length appcasts_counter code i status
  local line version appcast checkpoint out content latest_checkpoint latest_version review_name review_value

  local -r cask="$1"
  local -r values=$(get_cask_version_appcast_checkpoint "${cask}")

  IFS=$'\n' read -rd '' -a lines <<< "${values}"

  for line in "${lines[@]}"; do
    line=($(echo "${line}" | xargs))
    version="${line[0]}"
    appcast=$(replace_version_in_url "${line[1]}" "${version}")
    checkpoint="${line[2]}"

    [[ -z "${version}" ]] && continue

    [[ "${versions_max_length}" -lt "${#version}" ]] && versions_max_length="${#version}"
    versions+=("${version}")
    appcasts+=("${appcast}")
    checkpoints+=("${checkpoint}")

    [[ -z "${appcast}" ]] && continue
    ((appcasts_counter++))
  done

  for ((i = 0; i < ${#versions[@]}; i++)); do
    version="${versions[i]}"
    appcast="${appcasts[i]}"
    checkpoint="${checkpoints[i]}"

    if [[ "${i}" -eq 0 ]]; then
      review_name='Cask version'
      [[ "${appcasts_counter}" -gt 1 ]] && review_name+='s'
    else
      review_name=''
    fi

    review_value=$(printf "%-${versions_max_length}s" "${version}")

    if [[ ! -z "${appcast}" ]]; then
      out=$(get_url_content "${appcast}")
      code=$(echo "${out}" | tail -n1)
      content=$(echo "${out}" | sed \$d)

      latest_checkpoint="$(generate_appcast_checkpoint "${content}")"
      latest_version=$(get_appcast_version "${cask}" "${appcast}")
      status="$?"

      if [[ "${latest_checkpoint}" == "${checkpoint}" ]] && [[ "${status}" -eq 0 ]]; then
        review_value+=" | ${latest_version}"
        [[ "${SHOW_ALL}" == 'true' ]] && output_csv "${cask}" "${appcast}" "${version}" "${latest_version}"
      elif [[ "${status}" -eq 0 ]]; then
        if [[ "${latest_version}" =~ ${version} ]] || [[ "${version}" =~ ${latest_version} ]]; then
          review_value+=" | ${latest_version}"
          [[ "${SHOW_ALL}" == 'true' ]] && output_csv "${cask}" "${appcast}" "${version}" "${latest_version}"
        else
          show='true'
          review_value+=" | $(tput setaf 2)${latest_version}$(tput sgr0) (latest)"
          output_csv "${cask}" "${appcast}" "${version}" "${latest_version}"
        fi
      else
        review_value+=" | -"
      fi
    else
      review_value+=" | -"
    fi

    add_to_review "${review_name}" "${review_value}"
  done
}

# Review cask appcasts.
#
# Arguments:
#   $1 - Cask name
#   $2 - Appcast
#   $3 - Current version
#   $4 - Latest version
review_cask_appcasts() {
  local -a appcasts checkpoints
  local -i appcasts_max_length i
  local version appcast checkpoint out code content latest_checkpoint latest_version review_name review_value status

  local -r cask="$1"
  local -r values=$(get_cask_version_appcast_checkpoint "${cask}")

  IFS=$'\n' read -rd '' -a lines <<< "${values}"

  for line in "${lines[@]}"; do
    line=($(echo "${line}" | xargs))
    version="${line[0]}"
    appcast=$(replace_version_in_url "${line[1]}" "${version}")
    checkpoint="${line[2]}"

    [[ -z "${appcast}" ]] && continue

    [[ "${appcasts_max_length}" -lt "${#appcast}" ]] && appcasts_max_length="${#appcast}"
    appcasts+=("${appcast}")
    checkpoints+=("${checkpoint}")
  done

  for ((i = 0; i < ${#appcasts[@]}; i++)); do
    appcast="${appcasts[i]}"
    checkpoint="${checkpoints[i]}"

    out=$(get_url_content "${appcast}")
    code=$(echo "${out}" | tail -n1)
    content=$(echo "${out}" | sed \$d)

    if [[ "${code}" -eq 000 ]] && [[ "${appcast}" =~ 'https' ]]; then
      appcast="${appcast/https/http}"

      out=$(get_url_content "${appcast}")
      code=$(echo "${out}" | tail -n1)
      content=$(echo "${out}" | sed \$d)

      [[ "${appcasts_max_length}" -eq "$((${#appcast}+1))" ]] && ((appcasts_max_length--))
    fi

    latest_checkpoint="$(generate_appcast_checkpoint "${content}")"

    [[ "${i}" -eq 0 ]] && review_name='Cask appcast' || review_name=''
    [[ "${i}" -eq 0 ]] && [[ "${#appcasts[@]}" -gt 1 ]] && review_name+='s'

    review_value=$(printf "%-$((appcasts_max_length+6))s" "${appcast} (${code})")

    if [[ "${code}" -eq 200 ]]; then
      if [[ "${latest_checkpoint}" == "${checkpoint}" ]]; then
        status="$(tput setaf 2)valid$(tput sgr0) (${checkpoint:0:6}...)"
        review_value+=$(printf " %s" "| ${status}")
      else
        status="$(tput setaf 3)outdated checkpoint$(tput sgr0) (${checkpoint:0:6}... => $(tput setaf 7)${latest_checkpoint:0:6}$(tput sgr0)...)"
        review_value+=$(printf " %s" "| ${status}")
      fi
    else
      status="$(tput setaf 1)error ${code}$(tput sgr0)"
      review_value+=$(printf " %s" "| ${status}")
    fi

    add_to_review "${review_name}" "${review_value}"
  done
}

# Append new line to CSV file.
#
# Globals:
#   OUTPUT
#   OUTPUT_PATH
#
# Arguments:
#   $1 - Cask name
#   $2 - Appcast
#   $3 - Current version
#   $4 - Latest version
output_csv() {
  [[ "${OUTPUT}" == 'true' ]] && printf "\"%s\";\"%s\";\"%s\";\"%s\"\n" "$1" "$2" "$3" "$4" >> "${OUTPUT_PATH}"
}

# Globals:
#   SHOW_CHECKPOINTS
#   REVIEW
#
# Arguments:
#   $1 - Cask
main() {
  local cask show

  readonly cask="$1"
  show='false'

  add_to_review 'Cask name' "$(tput setaf 7)${cask}$(tput sgr0)"

  review_cask_versions "${cask}"
  [[ "${SHOW_CHECKPOINTS}" == 'true' ]] && review_cask_appcasts "${cask}"

  [[ "${SHOW_ALL}" == 'true' ]] && show='true'
  [[ "${show}" == 'true' ]] && show_review
  REVIEW=()

  [[ "${show}" == 'true' ]] && [[ "${#CASKS[@]}" -gt 1 ]] && divide
}

# process
[[ "${#CASKS[@]}" -eq 0 ]] && CASKS=($(egrep -lir --include '*.rb' "(appcast ')" . | xargs -n1 basename | sed 's|\.rb$||' | sort))
[[ "${#CASKS[@]}" -gt 1 ]] && printf "Checking updates for %s casks...\n" "${#CASKS[@]}" && divide
[[ "${OUTPUT}" == 'true' ]] && printf "\"%s\";\"%s\";\"%s\";\"%s\"\n" 'Name' 'Appcast' 'Current version' 'Latest version' > "${OUTPUT_PATH}"
for cask in "${CASKS[@]}"; do main "${cask}"; done

exit 0
